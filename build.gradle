apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'

repositories {
    mavenCentral()
}

mainClassName = 'com.krohinc.dns.DnsMadeEasyManualUpdater'
targetCompatibility = 1.5
version = '1.1.0'

jar {
    manifest {
        attributes 'Implementation-Title': 'DDNS Updater for DNS Made Easy', 
                   'Implementation-Version': version,
                   'Implementation-Vendor': 'Kroh Inc.',
                   'Main-Class': mainClassName 
    }
}

dependencies {
    compile(
        [group: 'com.beust', name:'jcommander', version:'1.29']
    )
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.6'
}

// Add a secondary CreateStartScripts task for the
// the autoupdater utility.
task createAutoUpdaterScripts(type: CreateStartScripts) {
    classpath = tasks['jar'].outputs.files + project.configurations.runtime
    mainClassName = 'com.krohinc.dns.DnsMadeEasyAutoUpdater'
    applicationName = 'autoupdater'
    outputDir = file("$buildDir/scripts")
}

// Mark the createAutoUpdaterScripts task as dependency of
// startScripts so that it integrates with the rest of the
// application plugin tasks.
tasks['startScripts'].dependsOn(createAutoUpdaterScripts)

// Add the secondary scripts to the application distribution.
applicationDistribution.from(createAutoUpdaterScripts) {
    into('bin')
    fileMode = 0755
}

// Add the README.md to the application distribution.
applicationDistribution.from("$rootDir") {
    include('README.md')
}

afterEvaluate {
    // Set the name of the script generated by the application plugin.
    def scriptsTask = tasks['startScripts']
    scriptsTask.applicationName = 'manualupdater'
}
